name: Build

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
env:
  LATEST_PY_VERSION: '3.12'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Cache packages per python version, and reuse until pyproject.toml changes
      - name: Cache pip packages
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: ${{ runner.os }}-pip-${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install ".[dev]"
      - name: Run unit tests
        run: pytest
      # Really basic test script just to make sure nothing blows up
      # TODO: Actual unit tests using click.testing.CliRunner
      - name: Run smoke tests
        run: |
          mkdir -p ./tmp/dir_1/dir_2
          touch ./tmp/file_1
          touch ./tmp/dir_1/file_2
          touch ./tmp/dir_1/dir_2/file_3
          ssc add test ./tmp
          ssc ls
          ssc backup test
          ssc ls test
          ssc restore test
          find ./tmp
          rm -rf ./tmp

#      - name: Generate code coverage report
#        run: pytest --cov --cov-report=term --cov-report=html
#      - name: Send code coverage report to Coveralls
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: coveralls --service=github

  # Run code analysis checks
  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}
      - name: Run style checks and linting via pre-commit hooks
        uses: pre-commit/action@v3.0.0

  # Deploy for tags only
  release:
    needs: [test, analyze]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}

      - name: Install dependencies
        run: pip install -U ".[build]"
      - name: Build wheel
        run: python setup.py sdist bdist_wheel
      - name: Deploy to pypi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/*
